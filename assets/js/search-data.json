{
  
    
        "post0": {
            "title": "Getting Started - Creating Categorical Image Predictor Models",
            "content": "Overview of this blog . This blog post contains a simple fast AI model that I created by following the lesson 1 of the latest Fast AI course. I have used a different dataset (person&#39;s emotion dataset fetched using duckduckgo) here and have almost replicated the steps used by Jeremy to train and predict an image classifier model. I&#39;m new to Deep Learning, as well as blogging. Hence, . Note : . This Blog post is written with an intention of learning how to use Jupyter Notebooks with fastpages to create blog posts. | This is not a very verbose tutorial, as my aim was to just get a hands on into the FastAi&#39;s code, and create a simple blog post out of it. | Future blogs that I&#39;ll write will focus more on the actual definitions of concepts/techniques and code by code walkthrough of the notebook that I&#39;ll create as I&#39;ll follow the course along. | I have added &quot;Appendix&quot; section at the bottom of the blog, to provide some useful (and can be basic) commands that I have learned as part of the notebook. | Step 1 : Installing fast&#39;s latest version . pip install -Uqq fastbook . Note: you may need to restart the kernel to use updated packages. . . Step 2 : Defining an Image Search Function . Function Signature : search_images(term, max_images) . Input : . term - The search term to be provided into the search engine | max_images - Number of images for which URLs to be generated | . Output : URLs of the images searched in the duckduckgo search engine . from fastcore.all import * import time def search_images(term, max_images=200): url = &#39;https://duckduckgo.com/&#39; res = urlread(url,data={&#39;q&#39;:term}) searchObj = re.search(r&#39;vqd=([ d-]+) &amp;&#39;, res) requestUrl = url + &#39;i.js&#39; params = dict(l=&#39;us-en&#39;, o=&#39;json&#39;, q=term, vqd=searchObj.group(1), f=&#39;,,,&#39;, p=&#39;1&#39;, v7exp=&#39;a&#39;) urls,data = set(),{&#39;next&#39;:1} while len(urls)&lt;max_images and &#39;next&#39; in data: data = urljson(requestUrl,data=params) urls.update(L(data[&#39;results&#39;]).itemgot(&#39;image&#39;)) requestUrl = url + data[&#39;next&#39;] time.sleep(0.2) return L(urls)[:max_images] . . Step 3 : Downloading &amp; Viewing a Searched image . We&#39;ll be importing download_url from fastdownload to download the list of URLs in a destination path provided as function argument | We&#39;ll then import fastai&#39;s vision, and open an Image with a thumbnail of 256*256 | from fastdownload import download_url dest = &#39;human_sad.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . download_url(search_images(&#39;happy human photos&#39;, max_images=1)[0], &#39;human_happy.jpg&#39;, show_progress=False) Image.open(&#39;human_happy.jpg&#39;).to_thumb(256,256) . Cleaning the directories . We will now remove any existing content that is present in the directories which we&#39;ll use for downloading and saving the images. Note: This will only work if you already have a directory with the below path. If not, then it will produce an error. . import shutil downloaded_path = Path(&#39;happy_sad_angry_downloaded&#39;) resized_path = Path(&quot;happy_sad_angry_resized&quot;) shutil.rmtree(downloaded_path) shutil.rmtree(resized_path) . Step 4 - Organising the data . Download the different categories of images in happy_sad_angry_downloaded directory | Resizing all the images downloaded and saving the resized images in happy_sad_angry_resized directory | Some photos might not download correctly which could cause our model training to fail, hence remove them: | searches = &#39;happy human&#39;,&#39;sad human&#39;,&#39;angry human&#39; downloaded_path = Path(&#39;happy_sad_angry_downloaded&#39;) resized_path = Path(&quot;happy_sad_angry_resized&quot;) for o in searches: dest_downloaded = (downloaded_path/o) dest_downloaded.mkdir(exist_ok=True, parents=True) download_images(dest_downloaded, urls=search_images(f&#39;{o} photo&#39;)) resize_images(downloaded_path/o, max_size=400, dest=resized_path/o) . /root/mambaforge/lib/python3.9/site-packages/PIL/Image.py:992: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . . failed = verify_images(get_image_files(resized_path)) failed.map(Path.unlink) len(failed) . 0 . Step 5 - Creating the DataBlock . To train a model, we&#39;ll need DataLoaders, which is an object that contains a : . Training set (the images used to create a model) and a ; | Validation set (the images used to check the accuracy of a model -- not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it: | DataBlock API . The inputs are going to be images “ImageBlock” and the outputs are going to be categories “CategoryBlock”. | get_image_files is used to get the items we require | We define a splitter to split the dataset into Training &amp; Validation Set. In this case, we are using a RandomSplitter with 20% data for validation | get_y takes the label for the images. Here, parent_label is the name of the parent (or folder) for each image, i.e., happy person, sad person, angry person | Before training, resize each image to 192x192 pixels by &quot;squishing&quot; it (as opposed to cropping it). | dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(resized_path) dls.show_batch(max_n=6) . Step 6 - Creating the Vision Learner . Here is where the actual magic happens. Yes, we&#39;re not aware about the fun calculations underneath at the moment, hence, let&#39;s call it as magic :wink: . We&#39;re now training the model using the dataloader that we created in the previous step. | We define error_rate as our metrics, which is nothing but the mean squared error | We provide resnet18 as the architecture(pre-trained model) to train our model. This is the basis of transfer learning, which will be covered in the later blogs. | learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . Downloading: &#34;https://download.pytorch.org/models/resnet18-f37072fd.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth . epoch train_loss valid_loss error_rate time . 0 | 2.000713 | 1.274472 | 0.552632 | 00:04 | . epoch train_loss valid_loss error_rate time . 0 | 1.384295 | 1.126901 | 0.473684 | 00:04 | . 1 | 1.099846 | 1.033579 | 0.385965 | 00:04 | . 2 | 0.864820 | 1.013857 | 0.403509 | 00:04 | . Observations: . The error_rate is currently ~0.4 ( &quot; &quot; signifies followed by any digits) in the model that I trained. However, in lesson 1 official notebooks, I saw that the error_rate is (0.01*) after 3 epochs. The difference between both the losses look noteworthy. I believe, that the dataset isn’t quite good (or augmented) yet for model to train ? . | I have seen that the error_rate reduces at 2nd epoch, and then increases in the 3rd epoch. The loss should be ideally unidirectional (i.e., decreasing after each epoch), or accuracy must be increasing. What does this pattern above imply ? . | I&#39;ll wait for the subsequent lectures to get the answer to the above questions! . Step 7 - Predictions . We&#39;ll now use the model to predict the images we downloaded initially to categorize one of the three categories . is_happy,x,probs = learn.predict(PILImage.create(&#39;human_happy.jpg&#39;)) print(f&quot;This is a: {is_happy}.&quot;) print(f&quot;Probability the person is happy: {probs[1]:.4f}&quot;) . This is a: happy human. Probability the person is happy: 0.8305 . print(learn.predict(PILImage.create(&#39;human_happy.jpg&#39;))) . (&#39;happy human&#39;, TensorBase(1), TensorBase([0.0033, 0.8305, 0.1662])) . is_sad,_,probs = learn.predict(PILImage.create(&#39;human_sad.jpg&#39;)) print(f&quot;This is a: {is_happy}.&quot;) print(f&quot;Probability the person is sad: {probs[2]:.4f}&quot;) . This is a: happy human. Probability the person is sad: 0.9988 . print(learn.predict(PILImage.create(&#39;human_sad.jpg&#39;))) . (&#39;sad human&#39;, TensorBase(2), TensorBase([3.9544e-05, 1.1677e-03, 9.9879e-01])) . Step 8 - Using a different dataset and training the model . Cat Vs Tiger DataSet . We&#39;ll now be using a simple tiger vs cat dataset downloaded from duckduckgo, and observe the predictions. All steps from Step 2-7 will be repeated . Displaying the Tiger Image Downloaded for prediction . # Downloading a tiger image to predict from fastdownload import download_url urls = search_images(&#39;tiger photos&#39;, max_images=10) dest = &#39;tiger.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . . Displaying the Cat Image Downloaded for prediction . # Downloading a cat image to predict download_url(search_images(&#39;cat photos&#39;, max_images=1)[0], &#39;cat.jpg&#39;, show_progress=False) Image.open(&#39;cat.jpg&#39;).to_thumb(256,256) . . Downloading all the Tiger &amp; Cat Images in the respective parent folder and displaying 6 images . searches = &#39;tiger&#39;,&#39;cat&#39; downloaded_path = Path(&#39;tiger_cat_downloaded&#39;) resized_path = Path(&quot;tiger_cat_resized&quot;) for o in searches: dest_downloaded = (downloaded_path/o) dest_downloaded.mkdir(exist_ok=True, parents=True) download_images(dest_downloaded, urls=search_images(f&#39;{o} photo&#39;)) resize_images(downloaded_path/o, max_size=400, dest=resized_path/o) . . failed = verify_images(get_image_files(resized_path)) failed.map(Path.unlink) len(failed) dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(resized_path) dls.show_batch(max_n=6) . . learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . epoch train_loss valid_loss error_rate time . 0 | 0.878760 | 0.110614 | 0.040541 | 00:02 | . epoch train_loss valid_loss error_rate time . 0 | 0.127793 | 0.020094 | 0.000000 | 00:02 | . 1 | 0.071790 | 0.040789 | 0.013514 | 00:02 | . 2 | 0.047379 | 0.040947 | 0.013514 | 00:02 | . Image.open(&#39;tiger.jpg&#39;) im.to_thumb(256,256) . . print(learn.predict(PILImage.create(&#39;tiger.jpg&#39;))) is_tiger,_,probs = learn.predict(PILImage.create(&#39;tiger.jpg&#39;)) print(f&quot;This is a: {is_tiger}.&quot;) print(f&quot;Probability : {probs[1]:.4f}&quot;) . . (&#39;tiger&#39;, TensorBase(1), TensorBase([5.1261e-09, 1.0000e+00])) . This is a: tiger. Probability : 1.0000 . Image.open(&#39;cat.jpg&#39;).to_thumb(256,256) . . print(learn.predict(PILImage.create(&#39;cat.jpg&#39;))) is_tiger,_,probs = learn.predict(PILImage.create(&#39;cat.jpg&#39;)) print(f&quot;This is a: {is_tiger}.&quot;) print(f&quot;Probability : {probs[0]:.4f}&quot;) . . (&#39;cat&#39;, TensorBase(0), TensorBase([0.9984, 0.0016])) . This is a: cat. Probability : 0.9984 . BackPack Vs Purse DataSet . We&#39;ll now be using a simple BackPack vs Purse dataset downloaded from duckduckgo, and observe the predictions. All steps from Step 2-7 will be repeated . Displaying the BackPack Image Downloaded for prediction . # Downloading a backpack image to predict from fastdownload import download_url urls = search_images(&#39;ladies backpack&#39;, max_images=10) dest = &#39;backpack.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . . Displaying the Purse Image Downloaded for prediction . # Downloading a cat image to predict download_url(search_images(&#39;ladies purse&#39;, max_images=1)[0], &#39;purse.jpg&#39;, show_progress=False) Image.open(&#39;purse.jpg&#39;).to_thumb(256,256) . . As you can see, the purse image has multuple purses and a lady as well as part of the image. Since, this notebook doesn&#39;t deal with any explicit data cleaning, we&#39;ll let this data be as it is and proceed further | . Downloading all the BackPack &amp; Purse Images in the respective parent folder and displaying 6 images . searches = &#39;ladies backpack&#39;,&#39;ladies purse&#39; downloaded_path = Path(&#39;backpack_purse_downloaded&#39;) resized_path = Path(&quot;backpack_purse_resized&quot;) for o in searches: dest_downloaded = (downloaded_path/o) dest_downloaded.mkdir(exist_ok=True, parents=True) download_images(dest_downloaded, urls=search_images(f&#39;{o} photo&#39;)) resize_images(downloaded_path/o, max_size=400, dest=resized_path/o) . . failed = verify_images(get_image_files(resized_path)) failed.map(Path.unlink) len(failed) dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(resized_path) dls.show_batch(max_n=6) . . learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . epoch train_loss valid_loss error_rate time . 0 | 1.093938 | 1.100249 | 0.371795 | 00:03 | . epoch train_loss valid_loss error_rate time . 0 | 0.743325 | 0.566097 | 0.205128 | 00:04 | . 1 | 0.570042 | 0.460896 | 0.166667 | 00:03 | . 2 | 0.431604 | 0.429654 | 0.179487 | 00:02 | . Image.open(&#39;backpack.jpg&#39;).to_thumb(256,256) . . print(learn.predict(PILImage.create(&#39;backpack.jpg&#39;))) is_backpack,_,probs = learn.predict(PILImage.create(&#39;backpack.jpg&#39;)) print(f&quot;This is a: {is_backpack}.&quot;) print(f&quot;Probability : {probs[0]:.4f}&quot;) . . (&#39;ladies backpack&#39;, TensorBase(0), TensorBase([9.9997e-01, 3.1113e-05])) . This is a: ladies backpack. Probability : 1.0000 . Image.open(&#39;purse.jpg&#39;).to_thumb(256,256) . . print(learn.predict(PILImage.create(&#39;purse.jpg&#39;))) is_backpack,_,probs = learn.predict(PILImage.create(&#39;purse.jpg&#39;)) print(f&quot;This is a: {is_backpack}.&quot;) print(f&quot;Probability : {probs[1]:.4f}&quot;) . . (&#39;ladies purse&#39;, TensorBase(1), TensorBase([0.0173, 0.9827])) . This is a: ladies purse. Probability : 0.9827 . Observations from all models . Even though the underlying code remained identical for all three datasets, it is seen that the model trained had significantly different error_rates and valid_loss for different images. It can be reasoned out, why the accuracy in &quot;Tiger Vs car&quot; model was the highest, in comparison to &quot;Backpack Vs Purse&quot; or &quot;Angry Vs Sad Vs Happy Emotion&quot; models. The primary reason behind the anomoly is that we almost did no data cleaning in any of the images, and while the Cats/Tigers images were already pretty good for the model to train, the other images required augmentation and futher preprocessing. For E.g., there are multiple humans within a single image for a &quot;happy person&quot; dataset, and multiple purses along with a lady present in the &quot;purse&quot; images. | All the models predicted correctly with almost perfect accuracy, with almost no data cleaning or feature engineering. | End . As you can see, we have successfully trained three models and predicted results in well under 20 mins. A couple of models aren&#39;t quite good enough yet. What can be the possible reasons ? I&#39;ll wait for the subsequent lectures to find out! This was a very brief introduction blog post to the image classification model in the fastAI, with almost no tweaks in the parameters, or pre-trained models, or data augmentations. The below section is completely optional, and just provide some additional commands that are tend to be useful in general, or which I have learned as completely new while doing this project. . Appendix . Optional Cells . This cell can be run if you want to delete the whole folder along with the contents. This will delete any/all directories and files that are present inside path object. | . import shutil path = Path(&#39;resized_fruits&#39;) shutil.rmtree(path) . Deleting only Files in a directory | . flag_search = &#39;happy person&#39; path = Path(&#39;happy_sad_angry&#39;) dest_flag_search = (path/flag_search) # Path to the &quot;happy person&quot; folder files = os.listdir(dest_flag_search) for fi in files: print(fi) os.unlink(dest_flag_search/fi) . Deleting a Folder (Note: This will only work when the folders are empty) | . searches = &#39;happy person&#39;,&#39;sad person&#39;,&#39;angry person&#39; path = Path(&#39;happy_sad_angry&#39;) for o in searches: os.rmdir(path/o) . Challenges/Errors Faced . Same File error - See post : https://forums.fast.ai/t/same-file-path-error-while-resizing-images-lesson-1/97601 . Note: While running the resize_images() method, the resized images were created with the same file name and path as of downloaded images, and hence the error was producing. Although, I&#8217;m not sure, why this error didn&#8217;t appear in the original notebook for lesson 1. | Useful Commands learned . OS Specific . To create a path to a folder or file :-path = Path(happy_sad_angry/abc.jpg) . | To delete a directory :- os.rmdir(&lt;path&gt;) . | To delete files in a folder :- os.unlink(&lt;filepath&gt;) . | To list directories and files in a folderos.listdir(&lt;path&gt;) . | To install latest versions of a library!pip install -Uqq fastbook . | To get the os environmentos.environ() . You can also use os.environ().get(&lt;key&gt;) | FastAI Specific . To download using URLfrom fastdownload import download_url download_url(&lt;url&gt;, &lt;dest_file&gt;, show_progress=False) . | FastAI&#39;s vision importsfrom fastai.vision.all import * . | To download and resize images to equal resolutiondownload_images(&lt;download_path&gt;, urls= &lt;list of url&gt;) resize_images(&lt;downloaded_path&gt;, max_size=400, dest=&lt;resized_path&gt;) . | To open an image from the pathPILImage.create(&#39;person_sad.jpg&#39;) . | To predict provided an item : Returns label(or category), index to look from the probability tensor, probabilities for all category (as a tensor)learn.predict(&lt;item&gt;) . Output : (&#39;sad person&#39;, TensorBase(2), TensorBase([3.2509e-03, 1.1917e-04, 9.9663e-01])) | Pythonic Image . To open an image in lazy manner (i.e., it identifies the file, but the file remains open and the actual image data is not read from the file until you try to process the data) and set thumbnail to 256*256im = Image.open(&lt;dest_file&gt;) im.to_thumb(256,256) . | Pythonic Strings . Formatted Stringso = &#39;happy person f&#39;{o} photo&#39; . Output : happy person photo | Further Learnings (Todo) . Using Regex | Define Datablock | Define Learner |",
            "url": "https://kashish18.github.io/Kash-ds-22-blog/fastpages/jupyter/2022/07/24/images-categoical-predictors.html",
            "relUrl": "/fastpages/jupyter/2022/07/24/images-categoical-predictors.html",
            "date": " • Jul 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Getting Started - Creating a Face Emotion Predictor Model",
            "content": "Overview of this blog . This blog post contains a simple fast AI model that I created by following the lesson 1 of the latest Fast AI course. I have used a different dataset here and have almost replicated the steps used by Jeremy to train and predict an image classifier model. Note: . This Blog post is written with an intention of learning how to use Jupyter Notebooks with fastpages to create blog posts. | This is not a very verbose tutorial, as my aim was to just get a hands on into the FastAi&#39;s code, and create a simple blog post out of it. | Future blogs that I&#39;ll write will focus more on the actual definitions of concepts/techniques and code by code walkthrough of the notebook that I&#39;ll create as I&#39;ll follow the course along. | I have added &quot;Commands&quot; learned section at the bottom of the blog, to provide under useful (and can be basic) commands that I have learned as part of the notebook. | Step 1 : Installing fast&#39;s latest version . pip install -Uqq fastbook . Note: you may need to restart the kernel to use updated packages. . Step 2 : Defining an Image Search Function . Function Signature : search_images(term, max_images) . Input : . term - The search term to be provided into the search engine | max_images - Number of images for which URLs to be generated | . Output : URLs of the images searched in the duckduckgo search engine . from fastcore.all import * import time def search_images(term, max_images=200): url = &#39;https://duckduckgo.com/&#39; res = urlread(url,data={&#39;q&#39;:term}) searchObj = re.search(r&#39;vqd=([ d-]+) &amp;&#39;, res) requestUrl = url + &#39;i.js&#39; params = dict(l=&#39;us-en&#39;, o=&#39;json&#39;, q=term, vqd=searchObj.group(1), f=&#39;,,,&#39;, p=&#39;1&#39;, v7exp=&#39;a&#39;) urls,data = set(),{&#39;next&#39;:1} while len(urls)&lt;max_images and &#39;next&#39; in data: data = urljson(requestUrl,data=params) urls.update(L(data[&#39;results&#39;]).itemgot(&#39;image&#39;)) requestUrl = url + data[&#39;next&#39;] time.sleep(0.2) return L(urls)[:max_images] . Step 3 : Downloading &amp; Viewing a Searched image . We&#39;ll be importing download_url from fastdownload to download the list of URLs in a destination path provided as function argument | We&#39;ll then import fastai&#39;s vision, and open an Image with a thumbnail of 256*256 | from fastdownload import download_url dest = &#39;person_sad.jpg&#39; download_url(urls[0], dest, show_progress=False) from fastai.vision.all import * im = Image.open(dest) im.to_thumb(256,256) . download_url(search_images(&#39;happy person photos&#39;, max_images=1)[0], &#39;person_happy.jpg&#39;, show_progress=False) Image.open(&#39;person_happy.jpg&#39;).to_thumb(256,256) . Cleaning the directories . We will now remove any existing content that is present in the directories which we&#39;ll use for downloading and saving the images. Note: This will only work if you already have a directory with the below path. If not, then it will produce an error. . import shutil downloaded_path = Path(&#39;happy_sad_angry_downloaded&#39;) resized_path = Path(&quot;happy_sad_angry_resized&quot;) shutil.rmtree(downloaded_path) shutil.rmtree(resized_path) . Step 4 - Organising the data . Download the different categories of images in happy_sad_angry_downloaded directory | Resizing all the images downloaded and saving the resized images in happy_sad_angry_resized directory | Some photos might not download correctly which could cause our model training to fail, hence remove them: | searches = &#39;happy person&#39;,&#39;sad person&#39;,&#39;angry person&#39; downloaded_path = Path(&#39;happy_sad_angry_downloaded&#39;) resized_path = Path(&quot;happy_sad_angry_resized&quot;) for o in searches: dest_downloaded = (downloaded_path/o) dest_downloaded.mkdir(exist_ok=True, parents=True) download_images(dest_downloaded, urls=search_images(f&#39;{o} photo&#39;)) resize_images(downloaded_path/o, max_size=400, dest=resized_path/o) . /root/mambaforge/lib/python3.9/site-packages/PIL/Image.py:992: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /root/mambaforge/lib/python3.9/site-packages/PIL/Image.py:992: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . failed = verify_images(get_image_files(resized_path)) failed.map(Path.unlink) len(failed) . 0 . Step 5 - Creating the DataBlock . To train a model, we&#39;ll need DataLoaders, which is an object that contains a : . Training set (the images used to create a model) and a ; | Validation set (the images used to check the accuracy of a model -- not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it: | DataBlock API . The inputs are going to be images “ImageBlock” and the outputs are going to be categories “CategoryBlock”. | get_image_files is used to get the items we require | We define a splitter to split the dataset into Training &amp; Validation Set. In this case, we are using a RandomSplitter with 20% data for validation | get_y takes the label for the images. Here, parent_label is the name of the parent (or folder) for each image, i.e., happy person, sad person, angry person | Before training, resize each image to 192x192 pixels by &quot;squishing&quot; it (as opposed to cropping it). | dls = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=[Resize(192, method=&#39;squish&#39;)] ).dataloaders(resized_path) dls.show_batch(max_n=6) . Step 6 - Creating the Vision Learner . Here is where the actual magic happens. Yes, we&#39;re not aware about the fun calculations underneath at the moment, hence, let&#39;s call it as magic ;). . We&#39;re now training the model using the dataloader that we created in the previous step. | We define error_rate as our metrics, which is nothing but the mean squared error | We provide resnet18 as the architecture(pre-trained model) to train our model. This is the basis of transfer learning, which will be covered in the later blogs. | learn = vision_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(3) . Downloading: &#34;https://download.pytorch.org/models/resnet18-f37072fd.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth . epoch train_loss valid_loss error_rate time . 0 | 1.550776 | 0.940344 | 0.353982 | 00:05 | . epoch train_loss valid_loss error_rate time . 0 | 0.927735 | 0.834148 | 0.274336 | 00:05 | . 1 | 0.689470 | 0.893372 | 0.300885 | 00:05 | . 2 | 0.513495 | 0.876687 | 0.292035 | 00:05 | . Step 7 - Predictions . We&#39;ll now use the model to predict the images we downloaded initially to categorize one of the three categories . is_happy,x,probs = learn.predict(PILImage.create(&#39;person_happy.jpg&#39;)) print(f&quot;This is a: {is_happy}.&quot;) print(f&quot;Probability the person is happy: {probs[1]:.4f}&quot;) . This is a: happy person. Probability the person is happy: 1.0000 . print(learn.predict(PILImage.create(&#39;person_happy.jpg&#39;))) . (&#39;happy person&#39;, TensorBase(1), TensorBase([4.7284e-06, 9.9999e-01, 6.0729e-07])) . print(learn.predict(PILImage.create(&#39;person_sad.jpg&#39;))) . (&#39;sad person&#39;, TensorBase(2), TensorBase([3.2509e-03, 1.1917e-04, 9.9663e-01])) . End . As you can see, we have successfully trained a model and predicted results in well under 10 mins. This was a very brief introduction blog post to the image classification model in the fastAI, with almost no tweaks in the parameters, or pre-trained models, or data augmentations. The below section is completely optional, and just provide some additional commands that are tend to be useful in general, or which I have learned as completely new while doing this project. . Optional Cells . ##### This cell can be run if you want to delete the whole folder along with the contents. This will delete any/all directories and files that are present inside path object. | . import shutil path = Path(&#39;resized_fruits&#39;) shutil.rmtree(path) . ##### Deleting only Files in a directory | . flag_search = &#39;happy person&#39; path = Path(&#39;happy_sad_angry&#39;) dest_flag_search = (path/flag_search) # Path to the &quot;happy person&quot; folder files = os.listdir(dest_flag_search) for fi in files: print(fi) os.unlink(dest_flag_search/fi) . ##### Deleting a Folder (Note: This will only work when the folders are empty) | . searches = &#39;happy person&#39;,&#39;sad person&#39;,&#39;angry person&#39; path = Path(&#39;happy_sad_angry&#39;) for o in searches: os.rmdir(path/o) . Challenges/Errors Faced . Same File error - See post : https://forums.fast.ai/t/same-file-path-error-while-resizing-images-lesson-1/97601 Description : While running the resize_images() method, the resized images were created with the same file name and path as of downloaded images, and hence the error was producing. Although, I&#39;m not sure, why this error didn&#39;t appear in the original notebook for lesson 1. | Useful Commands learned . OS Specific . To create a path to a folder or file :-path = Path(happy_sad_angry/abc.jpg) . | To delete a directory :- os.rmdir(&lt;path&gt;) . | To delete files in a folder :- os.unlink(&lt;filepath&gt;) . | To list directories and files in a folderos.listdir(&lt;path&gt;) . | To install latest versions of a library!pip install -Uqq fastbook . | To get the os environmentos.environ() . You can also use os.environ().get(&lt;key&gt;) | FastAI Specific . To download using URLfrom fastdownload import download_url download_url(&lt;url&gt;, &lt;dest_file&gt;, show_progress=False) . | FastAI&#39;s vision importsfrom fastai.vision.all import * . | To download and resize images to equal resolutiondownload_images(&lt;download_path&gt;, urls= &lt;list of url&gt;) resize_images(&lt;downloaded_path&gt;, max_size=400, dest=&lt;resized_path&gt;) . | To open an image from the pathPILImage.create(&#39;person_sad.jpg&#39;) . | To predict provided an item : Returns label(or category), index to look from the probability tensor, probabilities for all category (as a tensor)learn.predict(&lt;item&gt;) . Output : (&#39;sad person&#39;, TensorBase(2), TensorBase([3.2509e-03, 1.1917e-04, 9.9663e-01])) | Pythonic Image . To open an image in lazy manner (i.e., it identifies the file, but the file remains open and the actual image data is not read from the file until you try to process the data) and set thumbnail to 256*256im = Image.open(&lt;dest_file&gt;) im.to_thumb(256,256) . | Pythonic Strings . Formatted Stringso = &#39;happy person f&#39;{o} photo&#39; . Output : happy person photo | Further Learnings (Todo) . Using Regex | Define Datablock | Define Learner |",
            "url": "https://kashish18.github.io/Kash-ds-22-blog/fastpages/jupyter/2022/07/24/face-emotion-predictor.html",
            "relUrl": "/fastpages/jupyter/2022/07/24/face-emotion-predictor.html",
            "date": " • Jul 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kashish18.github.io/Kash-ds-22-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kashish18.github.io/Kash-ds-22-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kashish18.github.io/Kash-ds-22-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kashish18.github.io/Kash-ds-22-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}